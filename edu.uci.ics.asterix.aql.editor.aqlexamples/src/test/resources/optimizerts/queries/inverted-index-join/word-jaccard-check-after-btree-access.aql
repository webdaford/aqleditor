/*
 * Description    : Fuzzy self joins a dataset, TweetMessages, based on the similarity-jaccard-check function of its text-messages' word tokens.
 *                  TweetMessages has a keyword index on text-message and btree index on the primary key tweetid, and we expect the join to be 
 *					transformed into btree and inverted indexed nested-loop joins. We test whether the join condition can be transformed into 
 *					multiple indexed nested loop joins of various type of indexes.
 * Success        : Yes
 */

drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type TwitterUserType as closed {
	screen-name: string,
	lang: string,
	friends-count: int32,
	statuses-count: int32,
	name: string,
	followers-count: int32
} 

create type TweetMessageType as closed {
	tweetid: int64,
	user: TwitterUserType,
	sender-location: point,
	send-time: datetime,
	referred-topics: {{ string }},
	message-text: string,
	countA: int32,
	countB: int32
}

create dataset TweetMessages(TweetMessageType)
primary key tweetid;

create index twmSndLocIx on TweetMessages(sender-location) type rtree;
create index msgCountAIx on TweetMessages(countA) type btree;
create index msgCountBIx on TweetMessages(countB) type btree;
create index msgTextIx on TweetMessages(message-text) type keyword;

write output to nc1:"rttest/inverted-index-join_word-jaccard-check-after-btree-access.adm";

for $t1 in dataset('TweetMessages')
for $t2 in dataset('TweetMessages')
let $sim := similarity-jaccard-check(word-tokens($t1.message-text), word-tokens($t2.message-text), 0.6f)
where $sim[0] and $t1.tweetid < int64("20") and $t2.tweetid != $t1.tweetid
return {
    "t1": $t1.tweetid,
    "t2": $t2.tweetid,
    "sim": $sim[1]
}
