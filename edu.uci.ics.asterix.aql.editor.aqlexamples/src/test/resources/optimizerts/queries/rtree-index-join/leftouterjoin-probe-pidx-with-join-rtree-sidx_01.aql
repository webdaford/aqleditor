/*
 * Description  : Test that left-outer-join may use two available indexes, one for primary index in prob subtree and another for secondary rtree index in index subtree.
 * Issue        : 730, 741                 
 * Expected Res : Success
 * Date         : 8th May 2014
 */

drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type TwitterUserType as closed {
	screen-name: string,
	lang: string,
	friends-count: int32,
	statuses-count: int32,
	name: string,
	followers-count: int32
} 

create type TweetMessageType as closed {
	tweetid: int64,
        user: TwitterUserType,
        sender-location: point,
	send-time: datetime,
        referred-topics: {{ string }},
	message-text: string,
	countA: int32,
	countB: int32
}

create dataset TweetMessages(TweetMessageType)
primary key tweetid;

create index twmSndLocIx on TweetMessages(sender-location) type rtree;
create index msgCountAIx on TweetMessages(countA) type btree;
create index msgCountBIx on TweetMessages(countB) type btree;
create index msgTextIx on TweetMessages(message-text) type keyword;

write output to nc1:"rttest/rtree-index-join_leftouterjoin-probe-pidx-with-join-rtree-sidx_01.adm";

for $t1 in dataset('TweetMessages')
let $n :=  create-circle($t1.sender-location, 0.5)
where $t1.tweetid < int64("10")
order by $t1.tweetid
return {
"tweetid1": $t1.tweetid,
"loc1":$t1.sender-location,
"nearby-message": for $t2 in dataset('TweetMessages')
                             where spatial-intersect($t2.sender-location, $n) 
                             order by $t2.tweetid 
                             return {"tweetid2":$t2.tweetid, "loc2":$t2.sender-location}
};