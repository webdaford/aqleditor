/*
* generated by Xtext
*/
package edu.uci.ics.asterixdb.ui.labeling

import com.google.inject.Inject
import edu.uci.ics.asterixdb.aqlmodel.AddExpr
import edu.uci.ics.asterixdb.aqlmodel.AndExpr
import edu.uci.ics.asterixdb.aqlmodel.CompactStatement
import edu.uci.ics.asterixdb.aqlmodel.CreateDataverseSpecification
import edu.uci.ics.asterixdb.aqlmodel.CreateTypeSpecification
import edu.uci.ics.asterixdb.aqlmodel.DataverseDeclaration
import edu.uci.ics.asterixdb.aqlmodel.DeleteStatement
import edu.uci.ics.asterixdb.aqlmodel.DropDataverseStatement
import edu.uci.ics.asterixdb.aqlmodel.FeedStatement
import edu.uci.ics.asterixdb.aqlmodel.Field
import edu.uci.ics.asterixdb.aqlmodel.FunctionDeclaration
import edu.uci.ics.asterixdb.aqlmodel.Identifier
import edu.uci.ics.asterixdb.aqlmodel.Index
import edu.uci.ics.asterixdb.aqlmodel.InsertStatement
import edu.uci.ics.asterixdb.aqlmodel.LoadStatement
import edu.uci.ics.asterixdb.aqlmodel.MultExpr
import edu.uci.ics.asterixdb.aqlmodel.OperatorExpr
import edu.uci.ics.asterixdb.aqlmodel.Query
import edu.uci.ics.asterixdb.aqlmodel.RefreshExternalDatasetStatement
import edu.uci.ics.asterixdb.aqlmodel.RelExpr
import edu.uci.ics.asterixdb.aqlmodel.SetStatement
import edu.uci.ics.asterixdb.aqlmodel.UnaryExpr
import edu.uci.ics.asterixdb.aqlmodel.UnionExpr
import edu.uci.ics.asterixdb.aqlmodel.UpdateStatement
import edu.uci.ics.asterixdb.aqlmodel.ValueExpr
import edu.uci.ics.asterixdb.aqlmodel.WriteStatement
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class AQLLabelProvider extends DefaultEObjectLabelProvider {

    @Inject
    new(AdapterFactoryLabelProvider delegate) {
        super(delegate);
    }

    def text(DataverseDeclaration dd) {
        'use dataverse: ' + dd.name.name
    }

    def text(FunctionDeclaration fd) {
        'function: ' + fd.name.name
    }

    def text(CreateDataverseSpecification cdvs) {
        'create: ' + getText(cdvs.name)
    }

    def text(CreateTypeSpecification cts) {
        'create: ' + getText(cts.name.name.first) + " as " + getText(cts.typeExpr)
    }

    def text(Identifier id) {
        id.name
    }

    // Incomplete	
    def text(LoadStatement ls) {
        'load: ' + ls.name;
    }

    // Incomplete	
    def text(DropDataverseStatement dvs) {
        'drop: ' + getText(dvs.id)
    }

    def text(WriteStatement ws) {
        'write: ' + ws.name.name
    }

    def text(SetStatement ss) {
        'set: ' + ss.name.name + ' ' + ss.pv;
    }

    // Incomplete	
    def text(InsertStatement is) {
        'insert: ' + is.name.first.name;
    }

    // Incomplete	
    def text(DeleteStatement ds) {
        'delete: ' + ds.name
    }

    // Incomplete	
    def text(UpdateStatement us) {
        'update: ' + us.name
    }

    // Incomplete	
    def text(FeedStatement fs) {
        'feed: ' //+ fs.name
    }

    def text(CompactStatement cs) {
        'compact: ' + cs.nameComponents.first.name
    }

    // Incomplete	
    def text(Query q) {
        'query: ' + getText(q.expr)
    }

    def text(RefreshExternalDatasetStatement reds) {
        'refresh: ' + reds.name.first.name
    }

    //---------------------------------------------------
    // Expressions
    def text(OperatorExpr expr) {
        getText(expr.left) + " or " + getText(expr.right)
    }

    def text(AndExpr expr) {
        getText(expr.left) + " and " + getText(expr.right)
    }

    def text(RelExpr expr) {
        getText(expr.left) + " " + expr.op + " " + getText(expr.right)
    }

    def text(AddExpr expr) {
        getText(expr.left) + " " + expr.op + " " + getText(expr.right)
    }

    def text(MultExpr expr) {
        getText(expr.left) + " " + expr.op + " " + getText(expr.right)
    }

    def text(UnionExpr expr) {
        getText(expr.left) + " union " + getText(expr.right)
    }

    def text(UnaryExpr expr) {
        expr.op + getText(expr.expr)
    }

    def text(ValueExpr expr) {
        expr.expr + getText(expr.fa)
    }

    def text(Field f) {
        "." + f.ident
    }

    def text(Index i) {
        "[" + getText(i.expr) + "]"
    }
} // AQLLabelProvider
